# OBJECTS
# -------
#LIST(APPEND OBJECTS "${CMAKE_SOURCE_DIR}/src/spsim.c") 
LIST(APPEND OBJECTS "${CMAKE_SOURCE_DIR}/src/config.c")
LIST(APPEND OBJECTS "${CMAKE_SOURCE_DIR}/src/diffraction.c")
LIST(APPEND OBJECTS "${CMAKE_SOURCE_DIR}/src/molecule.c")
LIST(APPEND OBJECTS "${CMAKE_SOURCE_DIR}/src/io.c")
LIST(APPEND OBJECTS "${CMAKE_SOURCE_DIR}/src/mpi.c")
LIST(APPEND OBJECTS "${CMAKE_SOURCE_DIR}/src/noise.c") 
LIST(APPEND OBJECTS "${CMAKE_SOURCE_DIR}/src/amplification.c") 
LIST(APPEND OBJECTS "${CMAKE_SOURCE_DIR}/src/real_space.c")
LIST(APPEND OBJECTS "${CMAKE_SOURCE_DIR}/src/libconfig/grammar.c")
LIST(APPEND OBJECTS "${CMAKE_SOURCE_DIR}/src/libconfig/libconfig.c") 
LIST(APPEND OBJECTS "${CMAKE_SOURCE_DIR}/src/libconfig/scanner.c")
LIST(APPEND OBJECTS "${CMAKE_SOURCE_DIR}/src/crystal.c")
LIST(APPEND CUDA_OBJECTS "${CMAKE_SOURCE_DIR}/src/diffraction.cu")
LIST(APPEND CUDA_OBJECTS "${CMAKE_SOURCE_DIR}/src/crystal.cu")

# ADDING EXECUTABLES
# ------------------
IF(CUDA_FOUND)
LIST(APPEND OBJECTS ${CUDA_OBJECTS})
CUDA_ADD_EXECUTABLE(spsim spsim.c ${OBJECTS})
CUDA_ADD_EXECUTABLE(box_deconvolute box_deconvolute.c ${OBJECTS})
CUDA_ADD_EXECUTABLE(image_integrate image_integrate.c)
IF(BUILD_LIBRARY)
  CUDA_ADD_LIBRARY(libspsim SHARED spsim.c ${OBJECTS})
ENDIF(BUILD_LIBRARY)
ELSE(CUDA_FOUND)
ADD_EXECUTABLE(spsim spsim.c ${OBJECTS})
ADD_EXECUTABLE(box_deconvolute box_deconvolute.c ${OBJECTS})
ADD_EXECUTABLE(image_integrate image_integrate.c)

# ADDING LIBRARY
# --------------
IF(BUILD_LIBRARY)
  ADD_LIBRARY(libspsim SHARED spsim.c ${OBJECTS})
ENDIF(BUILD_LIBRARY)
ENDIF(CUDA_FOUND)
IF(BUILD_LIBRARY)
set_target_properties(libspsim PROPERTIES COMPILE_DEFINITIONS "_LIBRARY")
set_target_properties(libspsim PROPERTIES OUTPUT_NAME spsim)
TARGET_LINK_LIBRARIES(libspsim ${SPSIM_LIBRARIES})
ENDIF(BUILD_LIBRARY)

# LINKING
# -------
TARGET_LINK_LIBRARIES(spsim ${SPSIM_LIBRARIES})
TARGET_LINK_LIBRARIES(box_deconvolute ${SPSIM_LIBRARIES})
TARGET_LINK_LIBRARIES(image_integrate ${SPSIM_LIBRARIES})

# INSTALLATION
# ------------
INSTALL(TARGETS spsim image_integrate box_deconvolute
        RUNTIME DESTINATION bin
	LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib)

# PYTHON WRAPPER
# --------------
# handle the QUIETLY and REQUIRED arguments and set PYTHONINTERP_FOUND to TRUE if
# all listed variables are TRUE
INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(PythonInterp DEFAULT_MSG PYTHON_EXECUTABLE)

MARK_AS_ADVANCED(PYTHON_EXECUTABLE)
if(PYTHONLIBS_FOUND AND SWIG_FOUND AND PYTHONINTERP_FOUND AND PYTHON_NUMPY_FOUND)
  #MESSAGE("numpy found compiling python wrappers")
  FILE(GLOB spsim_headers "${CMAKE_CURRENT_SOURCE_DIR}/../include/*.h")
  add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/spsim_wrap.c COMMAND ${SWIG_EXECUTABLE} -python -outcurrentdir -I/${SPIMAGE_INCLUDE_DIR} -o ${CMAKE_CURRENT_BINARY_DIR}/spsim_wrap.c ${CMAKE_CURRENT_SOURCE_DIR}/spsim_pybackend.i DEPENDS ${spsim_headers} ${CMAKE_CURRENT_SOURCE_DIR}/spsim_pybackend.i)
  INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH} ${PYTHON_NUMPY_INCLUDE_DIR})

IF(CUDA_FOUND)
 CUDA_ADD_LIBRARY(_spsim_pybackend SHARED spsim.c ${OBJECTS} ${CMAKE_CURRENT_BINARY_DIR}/spsim_wrap.c)
 CUDA_ADD_CUFFT_TO_TARGET(_spsim_pybackend)
ELSE(CUDA_FOUND)
 ADD_LIBRARY(_spsim_pybackend SHARED spsim.c ${OBJECTS} ${CMAKE_CURRENT_BINARY_DIR}/spsim_wrap.c)
ENDIF(CUDA_FOUND)
 TARGET_LINK_LIBRARIES(_spsim_pybackend ${SPSIM_LIBRARIES} ${PYTHON_LIBRARIES})
  set_target_properties(
    _spsim_pybackend
    PROPERTIES SOVERSION 1
    VERSION 1
    PREFIX ""
    SUFFIX ".so"
    INSTALL_NAME_DIR ${PYTHON_INSTDIR}
    )
  INSTALL(TARGETS _spsim_pybackend
    RUNTIME DESTINATION ${PYTHON_INSTDIR}
    LIBRARY DESTINATION ${PYTHON_INSTDIR}
    ARCHIVE DESTINATION ${PYTHON_INSTDIR}
    )
  INSTALL(FILES spsim.py ${CMAKE_CURRENT_BINARY_DIR}/spsim_pybackend.py DESTINATION  ${PYTHON_INSTDIR})
endif()
